package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _assets_gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xd7\x2b\x2e\xcd\xe5\xd2\xd2\x4b\xc9\x4f\xae\xe0\xd2\xcb\x4c\x49\x4d\xd4\xe7\xd2\xd2\x73\x09\x8e\x0f\x2e\xc9\x2f\x4a\x05\x04\x00\x00\xff\xff\xcd\x23\x13\xc6\x1f\x00\x00\x00")

func assets_gitignore() ([]byte, error) {
	return bindata_read(
		_assets_gitignore,
		"../assets/.gitignore",
	)
}

var _assets_golangci_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xcd\x52\x1b\xb9\x16\xde\xfb\x29\x54\xf1\x06\x16\x26\x38\xb9\x9b\xeb\xdd\xad\x5b\x53\xb3\x9b\x9a\xaa\x79\x02\xd1\xad\x6e\xab\x90\xa5\x1e\x49\x0d\x64\x67\xc0\x80\x4d\x4c\x9c\x1f\x08\xe0\x10\x08\x99\xf0\x33\x99\x01\x93\xa1\x2a\x63\x88\x6d\x1e\x66\x5a\xed\xf6\x8a\x57\x98\x52\xb7\xe9\x6e\x0c\xc3\xb0\xa0\xf4\x1d\x1d\x1f\x7d\xe7\x7c\xd2\xe9\x43\x30\x95\x88\x8b\x42\x06\x00\x13\x0b\x38\x45\x50\x0e\x12\x52\x00\x92\xbb\x28\x03\x00\xa2\xda\xa4\x77\x01\xc8\x01\x28\x0c\x8c\x8d\x22\x32\xa6\x87\x86\x29\x66\x3e\x33\x08\x13\x68\x88\x11\xe7\xe9\x6d\x34\x57\x84\xae\x90\x78\x26\xde\x9f\x73\x18\x97\x84\x31\x87\x23\x2b\xb4\x65\xc3\x7f\x39\x60\x33\x81\x8c\xa1\x97\xcd\x66\x90\x1c\xae\x29\x33\xe4\xdc\x70\xcd\xd9\xac\x18\x39\x41\x18\xcc\x41\x3a\x87\x1b\xfc\x33\x09\xf9\xdc\xf2\x91\x50\x62\x23\x6d\x91\xcf\x9c\x94\x47\xf6\xde\xe4\xb2\xf7\x67\x68\x22\x68\x1a\xcc\x44\x99\xec\x0d\x76\x6c\x17\x72\x33\xc6\xcc\x16\x04\x25\xd0\x75\xc8\xcd\x3a\xa6\x9e\xbd\x53\x9d\xec\x7d\xe5\x19\x1a\x2d\x97\x12\x44\x6f\x90\x6d\xe0\x68\x99\x05\xfe\x2f\x65\x7f\xef\xc0\xdf\x6a\xa9\x97\x87\xea\x64\x4b\xed\x1c\xab\xa5\x63\xf5\xa5\xac\x1a\x5b\x83\x95\xc6\x75\xa7\xae\xba\x6f\x54\x6d\xad\xdf\xac\xf8\xfb\xcb\xfe\xee\x57\xff\x8f\x7d\xff\x7c\x43\xcd\x37\x55\xf5\xcc\x6b\xaf\x79\xdd\xab\xfe\xfa\xe8\x4f\x0c\x46\x2d\x6c\xab\xd7\x75\xce\x5c\x89\xf8\x60\xb1\x3b\xd8\x29\x07\x87\xf3\xde\xb7\x83\xb4\x67\xbf\x59\x51\xdd\x8f\xaa\xd3\xf0\xdf\x1f\xf8\x8d\x97\x5e\xef\x5d\x26\x11\x32\x4c\x92\x32\x9b\xb0\x29\x48\xc4\x7d\x6c\xa3\xa3\x31\xc5\x52\xad\x74\xfd\x8d\xb3\xbb\x5c\xbd\x8b\xbd\x87\xe8\x86\xbf\x1a\x0b\x56\xce\xd5\xd9\x2b\xd5\xab\x0e\x9a\xbd\xc8\xef\xba\x53\x0f\xae\xb6\xbd\xf6\x67\xd5\x68\x79\xdf\x0e\x82\xf2\x62\xb0\xfd\x6a\x78\x66\xbb\xac\x4e\x9b\xc1\xe1\xbc\xea\x5c\x06\xfb\x75\xff\xc5\xf1\xf8\x5d\xce\x9a\x92\x88\x4b\xcd\x0c\x66\x53\x2c\xd3\x98\x8a\x34\xe4\x58\x62\x23\x85\xf5\x4d\xb9\x9d\xaf\xaa\x2f\xf5\x2f\x8f\xa2\xa2\xa9\xd7\xf5\x88\xb8\xce\xf2\xfc\x78\xb0\xb2\x1a\x31\xf3\x77\x6a\xaa\x71\xa0\x1a\x7f\x8e\x4d\x8c\xf7\xbf\xbd\x51\x67\x3d\x5d\x8f\x5e\x75\xd0\xde\x0f\x16\x9e\xf7\x9b\x15\xaf\x5d\xd6\x29\xad\xee\x05\x8b\x5d\x9d\x61\xb9\xee\xb5\xd7\xd5\xe1\x82\xbf\xbb\xa3\x23\x2c\x6f\x7b\xed\x13\xff\xed\x4a\x14\xf3\xba\x53\xf7\x37\x3f\xf8\xe7\x1b\x41\x6b\x59\x55\x7f\x1b\x46\xfe\xab\xbc\x90\x4e\xd7\x64\xa9\x34\x4c\x36\x77\x9b\x74\x70\xb5\xae\xde\xed\xf6\x9b\x95\xc1\xfa\x76\xd0\x6a\x8d\x21\xce\x19\x1f\x8f\xc8\x0e\x16\xbb\x7a\x71\xda\xf4\x2e\x6a\xea\xa0\xab\x2f\x42\x2a\xc5\xeb\x4e\xdd\x6b\xaf\xa9\xa5\xf9\xe0\xb4\xad\x56\x8f\xfd\xf2\xbc\xbf\x5b\x19\x94\x3f\x44\x81\xae\x3b\xf5\xfe\xfa\xf1\x50\xa0\xb3\x2f\x11\x4d\xd5\xdb\x54\xd5\xb3\xc8\xc1\x6b\xaf\x7a\xed\xe7\xfe\xdb\x15\xef\x72\x39\xc5\x16\x71\x9e\xcf\x3f\x4d\x08\x5b\xa5\x14\x7b\xcb\x2d\x39\x29\x58\x44\xd0\x44\x3c\xc1\xb8\xa4\x9f\x54\x4a\xd3\xb0\x59\xc4\xa8\x44\xcd\x14\x60\xe6\xad\xb7\x6c\x33\x87\x63\x2a\x2d\xcb\xa5\x06\x85\x25\x94\xd8\x75\xaf\x4a\x00\x2e\x39\x24\xb5\xa9\x9b\xd7\x10\x60\x8a\x2c\x0b\x0a\x81\x6d\x9a\x98\x24\xe2\x16\x34\x12\x92\x84\xc4\x2d\xa2\x04\x09\xb6\x69\xd2\x3e\x4a\x58\x08\x07\x25\xfb\x14\x4e\x23\x93\x27\xf1\x29\x12\x12\x5b\x23\x4f\xac\xd5\xd0\x77\xbd\x71\xc0\x91\x74\x39\x55\xb5\xb5\xc1\xfb\x8f\x89\x78\x3b\xb5\xe8\x3a\xf5\x7f\xd5\xcf\x20\x14\xec\xb3\x77\x79\x19\x1c\xd5\x54\x6f\x33\xd2\xc6\x6b\xaf\x69\xff\x5e\x55\xdf\xcc\xab\xa5\xe0\x70\x3e\xb9\x75\xa7\xbb\x83\xed\xa5\xa0\xb5\xe1\x5d\x2e\x87\x71\x9e\xeb\xbb\xba\xf4\x55\x9d\xee\x7a\xed\x72\x7f\xe1\x42\x55\xae\xbc\x8b\x3d\xaf\xbd\xd6\xef\xbd\x08\x8e\x16\x62\x15\x29\x89\xe8\xc4\xcc\xc3\xbe\x1e\x03\xad\x4a\x5a\x19\x87\x23\x48\x08\x8b\xab\x7c\xab\xf5\x67\x47\x7b\x7f\xf6\xbe\xe6\x9f\xbd\xdb\xfd\x63\x13\x77\x0d\x39\x62\x7a\x46\x6e\xff\x4e\x22\x21\x1d\x68\x4c\x43\x3b\x96\x36\xf9\x6c\x0c\x0d\x2e\x35\x18\x9d\x41\x5c\x26\x06\x07\x72\x58\x4a\xa0\x2b\x12\x31\x67\xe0\x6d\xfe\xb3\x45\x2c\x91\x70\xa0\x81\x46\x7a\x46\xaf\xaa\x3e\x35\x83\xd6\x89\x7e\xbb\xef\x37\xc7\x82\x93\xdf\xd5\xe1\x02\xb6\x1e\x5b\x8c\xf7\x4f\x6a\xe3\x69\x45\xef\xca\xe9\xef\xd4\xb4\x0c\x8b\x0d\x7f\xab\x75\x53\x74\xfd\x4a\x57\x3f\xa8\xce\x65\xbf\x56\x8d\x15\xf7\x2b\x7b\xc1\x51\xcd\xaf\x34\xbc\x8b\x5a\x24\x99\xfa\x74\x14\xeb\x35\x2b\x48\x26\xc3\x5d\xaa\x3f\xfd\xba\x14\xa2\x00\x2c\x48\xc2\xcf\xa0\xc4\x25\xc4\x5c\x59\x00\xf9\xc9\x52\x06\x00\x31\x8d\x9d\x9c\x89\xa3\x19\x22\x04\x16\x26\x48\x14\x32\x99\xe1\x6c\x91\x13\x48\x4a\x4c\xed\x68\xc8\x70\x1d\x12\x8d\x13\xb2\xc8\x91\x28\x32\x62\x16\xc0\xd3\xc9\xc9\x0c\x18\x7e\xe8\xa2\x4d\x82\x29\x12\x05\xf0\x24\xdc\x00\xa1\x88\xa8\x84\xa8\xa6\x91\x0f\x6d\x84\x90\xc4\x33\x47\x10\xb5\x65\xb1\x00\x9e\xfc\x27\xf2\x97\x70\x2a\x37\x8b\x4d\x6d\xca\x67\x32\x58\x08\x17\x85\xa7\xa3\x39\x83\xb8\x26\xca\x71\x97\x44\x86\xf0\xfd\x25\x23\x50\xf4\x97\x9e\x46\x74\xf6\x73\xb2\x00\x1e\x7d\x9f\x9f\xcc\x17\xc0\x8f\x4c\x22\x2a\x31\x24\xa0\x08\x79\x38\x08\x98\xc0\xe0\xc8\x8c\x8c\xe2\xd1\x3f\x87\x1c\x9d\x42\xe2\xc0\x3f\xfd\x2f\x3f\x99\xff\x6f\x01\x0c\x2f\x1b\xb0\xb1\x2c\xba\x53\x13\x06\x2b\x3d\xb6\x19\x81\xd4\x7e\xec\x70\x26\xd9\x94\x6b\x45\x0b\x80\x85\x9e\x3a\x38\x32\xa0\x44\xe6\x03\x27\x8e\x4c\x5f\xf1\x81\xba\xa9\x60\x6a\x03\x03\x0a\x24\x00\xa6\x40\xcc\x62\x69\x14\x01\xb3\xc2\x1b\xfe\x40\xc4\x64\x18\x4b\x82\xb9\x42\x02\xca\x24\x98\x42\xc0\x80\x84\x3c\xc8\xe8\xce\x00\x17\x87\xd1\x3b\x13\xdf\x71\x0e\xc2\x78\x3a\x96\xf6\x79\x30\xd8\xbf\x16\xb4\x28\xa5\x33\xf1\x7f\xdd\x10\x7e\x60\x12\x5b\x18\xf1\x91\xd2\xfd\x1d\x00\x00\xff\xff\xd0\xac\x53\xee\xfc\x0a\x00\x00")

func assets_golangci_yaml() ([]byte, error) {
	return bindata_read(
		_assets_golangci_yaml,
		"../assets/.golangci.yaml",
	)
}

var _assets_commit_msg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x4d\x4a\x33\x41\x10\x86\xf7\x7d\x8a\xf7\x9b\x6f\x20\x3f\x8b\x84\x6c\x95\x21\x88\x24\x9a\xc5\x30\x30\x99\x5d\x12\xa1\xd3\x56\xa7\x1b\xd2\xd3\x43\x77\x29\x09\x34\x9e\xc4\xab\x78\x26\xaf\x20\xf1\x07\x71\xe5\x4a\xf4\x59\x15\x3c\x45\x55\x51\xef\xff\x7f\xe3\xad\x6d\xc7\xd1\x08\xe1\xe2\xae\xc8\xfb\x4a\x32\xf2\xc9\x40\x88\x4e\x32\x53\x68\x8b\xde\x4d\x5f\x93\xe4\xa4\xed\x21\xb1\x7f\x7e\x7a\x34\x9e\x5f\x6b\x8a\x9c\x6e\xbd\x8a\x29\xf2\x71\x4f\x29\x90\x96\x8a\x7d\x48\x1d\x05\xfd\x66\x95\x09\xfe\x24\xee\x29\x70\x72\x14\x76\x94\xe2\xb1\x55\x83\x75\x7f\x3a\x1a\xae\x07\xd3\xb3\xd1\x30\xef\x09\x61\x35\xb0\x5a\x21\x77\x71\x87\xe2\x01\xf9\xfb\x66\x6c\x36\xe7\x60\x43\xad\x00\x48\x19\x8f\x4c\x79\xe7\x2c\xe3\xd4\xd7\xc9\x18\x33\x41\xfb\x48\x02\xf8\xf0\xc5\x6f\x90\x7d\x1e\x80\x0c\xdf\xd1\x5c\xcf\x30\xaf\xea\xf2\xa2\x41\x35\xc7\x65\x55\x96\x8b\x06\xe5\xf2\x0a\x8b\x25\x66\x75\x5d\xd5\x5f\xc6\x35\x86\xa0\x7d\x70\x92\xe1\xee\x22\x63\x4b\xf0\x2d\xc1\x6b\xfc\x68\x26\xd9\x1f\xf9\xe9\xc1\x32\x26\x42\xdb\x97\x00\x00\x00\xff\xff\x77\x1b\x29\xf3\xa5\x02\x00\x00")

func assets_commit_msg() ([]byte, error) {
	return bindata_read(
		_assets_commit_msg,
		"../assets/commit-msg",
	)
}

var _assets_pre_commit = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x31\x0e\x82\x40\x10\x85\xe1\x9a\x39\xc5\x13\x2c\x5d\xd0\xda\xc2\x83\x18\x8b\x71\x77\x16\x26\x59\x06\x03\xa3\xc1\xdb\x9b\x90\x58\x50\xbe\x7c\x79\x7f\x73\xe8\x9e\x6a\xdd\x32\x10\x35\x98\xdf\x86\x7e\x2a\x6c\x7d\xd4\x50\xd4\x9c\x76\x6b\xf3\xf0\x41\x88\x68\xff\xd0\x7e\x79\x2c\xa4\x19\x77\x1c\x6f\x08\x26\x38\xe3\x71\x85\x0f\x62\x54\x49\x1c\x26\xa0\xde\x47\x32\x6b\x91\x74\xc2\xab\x08\x2f\x82\xac\x2b\xb2\xce\x8b\x6f\x1f\xf4\xea\xe0\x94\xc0\x96\x10\xa7\x71\x54\xaf\xa9\x92\x55\x1d\x17\xca\xfa\x0b\x00\x00\xff\xff\xd1\x10\xef\x0d\xae\x00\x00\x00")

func assets_pre_commit() ([]byte, error) {
	return bindata_read(
		_assets_pre_commit,
		"../assets/pre-commit",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../assets/.gitignore": assets_gitignore,
	"../assets/.golangci.yaml": assets_golangci_yaml,
	"../assets/commit-msg": assets_commit_msg,
	"../assets/pre-commit": assets_pre_commit,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"assets": &_bintree_t{nil, map[string]*_bintree_t{
			".gitignore": &_bintree_t{assets_gitignore, map[string]*_bintree_t{
			}},
			".golangci.yaml": &_bintree_t{assets_golangci_yaml, map[string]*_bintree_t{
			}},
			"commit-msg": &_bintree_t{assets_commit_msg, map[string]*_bintree_t{
			}},
			"pre-commit": &_bintree_t{assets_pre_commit, map[string]*_bintree_t{
			}},
		}},
	}},
}}
